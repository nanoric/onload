#!/bin/bash -u
# SPDX-License-Identifier: BSD-2-Clause
# X-SPDX-Copyright-Text: (c) Copyright 2012-2020 Xilinx, Inc.
##############################################################################
# Copy only portions of source tree needed for onload, apply copyright
# messages and pre-process to strip platforms we're not releasing.
#
# Author: Amit Gupta
##############################################################################

bin=$(cd $(dirname "$0") && /bin/pwd)
me=$(basename "$0")

err()  { echo >&2 "$*"; }
log()  { err "$me: $*"; }
fail() { log "$*"; exit 1; }
try()  { "$@" || fail "FAILED: $*"; }
tryquiet()  { "$@" >/dev/null || fail "FAILED: $*"; }

inittmp() { tmp=; trap "rm -rf \"$tmp\"" EXIT; }
settmp()  { try [ -z "$tmp" ]; tmp="$1"; try [ -n "$tmp" ]; }
rmtmp()   { [ -n "$tmp" ] && rm -rf "$tmp"; tmp=; }


usage() {
  err
  err "usage:"
  err "  $me [options]"
  err
  err "options:"
  err "  --version <version>"
  err "  --release"
  err "  --product <product>"
  err "  --cloud"
  err "  --enterprise"
  err "  --force"
  err "  --tarball <prebuilt tarball>"
  err
  exit 1
}

# main()
release=false
version=
Product=
cloud=false
enterprise=false
force=false
tarball=
my_tar=false
working_dir=

while [ $# -gt 0 ]; do
  case "$1" in
    --version)  shift; version="$1";;
    --release)  release=true;;
    --product)  shift; Product="$1";;
    --cloud)    cloud=true;;
    --enterprise)  enterprise=true;;
    --force)    force=true;;
    --tarball)  shift; tarball="$1";;
    --working-dir) shift; working_dir="$1";;
    -*)  usage;;
    *)   break;;
  esac
  shift
done
[ $# = 0 ] || usage

TOP=$("$bin/mmaketool" --toppath)
[ -n "$TOP" ] || fail "ERROR: mmaketool --toppath failed"

let count=0
[ -z "$Product" ] || let count++
if $cloud; then
  Product="CloudOnload"
  let count++
fi
if $enterprise; then
  Product="EnterpriseOnload"
  let count++
fi
if [ $count -gt 1 ]; then
  fail "Only one product type may be specified with --product, --cloud and --enterprise options"
fi
if [ $count -eq 0 ]; then
  Product="Onload"
fi
unset count

product=$(echo "$Product" | tr '[A-Z]' '[a-z]' | tr -d ' ')

if [ -z "$tarball" ]; then
  # To create OpenOnload Tar ball run "scripts/onload_mkdist" script 
  onload_mkdist_args="$onload_mkdist_args --version $version"
  onload_mkdist_args="$onload_mkdist_args --debug"
  onload_mkdist_args="$onload_mkdist_args --product $Product"
  if $release; then 
    onload_mkdist_args="$onload_mkdist_args --release"
  fi
  if $force; then 
    onload_mkdist_args="$onload_mkdist_args --force"
  fi
  try "$TOP/scripts/onload_mkdist" $onload_mkdist_args
  my_tar=true

  if $release; then
    tarball="$product-$version.tgz"
  else
    tarball="$product-${USER}_$version.tgz"
  fi
fi

# To create a DKMS package
if [ -z "$working_dir" ]; then
  working_dir="/home/$USER/dkms_pkg"
fi
DKMS="$working_dir/dkms"
RPM="$working_dir/rpms"
# Prepare DKMS directories
try rm -rf "$DKMS"
try rm -rf "$RPM"
try mkdir -p "$DKMS"/{usr_src,var_lib}
try mkdir -p "$RPM"/{SPECS,SOURCES,BUILD,RPMS,BUILDROOT,SRPMS} 
try cp /var/lib/dkms/dkms_dbversion $DKMS/var_lib

# Copy the tar ball in dkms directory and untar it and add dkms.conf 
if $release; then
  try tar xf "$tarball" -C "$DKMS/usr_src/"
else 
  try tar xf "$tarball" -C "$DKMS/usr_src/"
  try mv "$DKMS/usr_src/$product-${USER}_$version" "$DKMS/usr_src/$product-$version"
fi

if $my_tar; then
  [ -e "$tarball" ] && try rm -rf "$tarball"
  [ -e "$tarball.md5" ] && try rm -rf "$tarball.md5"
fi

try sed "s/^PACKAGE_VERSION=.*/PACKAGE_VERSION=$version/" \
  < "$TOP/scripts/onload_misc/dkms.conf" \
  > "$DKMS/usr_src/$product-$version/dkms.conf"

if [ "$product" != "openonload" ]; then
  try sed -i -e " s/openonload/$product/g" "$DKMS/usr_src/$product-$version/dkms.conf"
fi

# Add the source to DKMS.  It will create a sym-link to the source using
# an absolute path which won't work in the chroot, so replace that with
# a relative path.
try dkms add --dkmstree "$DKMS/var_lib" \
  --sourcetree "$DKMS/usr_src" \
  -m $product -v "$version"
rm -f "$DKMS/var_lib/$product/$version/source"
try ln -s "../../../usr_src/$product-$version" \
  "$DKMS/var_lib/$product/$version/source"

# Create a DKMS tarball
try dkms mktarball --dkmstree "$DKMS/var_lib" \
  --sourcetree "$DKMS/usr_src" \
  -m $product \
  -v "$version" \
  --archive "$product-$version.dkms.tar.gz" \
  --source-only
# To create a DKMS rpm 
try mv "$DKMS/var_lib/$product/$version/tarball/$product-$version.dkms.tar.gz" \
  "$RPM/SOURCES/"
try cp "$TOP/scripts/onload_misc/openonload.dkms-spec" "$RPM/SPECS/openonload-dkms.spec"

if [ "$product" != "openonload" ]; then
  try sed -i -e " s/openonload/$product/g" "$RPM/SPECS/openonload-dkms.spec"
  try sed -i -e "/Provides:\t$product/p;s/Provides:\t$product/Provides:\topenonload/g" \
    "$RPM/SPECS/openonload-dkms.spec"
fi

try sed -i  "/define pkgversion/ c%define pkgversion $version" \
  "$RPM/SPECS/openonload-dkms.spec"
if [[ "$version" == *-* ]]; then
  try sed -i 's/^\(Version:\).*/\1    '"${version%%-*}"'/' "$RPM/SPECS/openonload-dkms.spec" 
  release_with_underscores="$(echo "${version#*-}" | tr - _)"
  try sed -i 's/^\(Release:\).*/\1    '"${release_with_underscores}"'/' "$RPM/SPECS/openonload-dkms.spec"
else
  try sed -i 's/^\(Version:\).*/\1    '"$version"'/' "$RPM/SPECS/openonload-dkms.spec"
  try sed -i 's/^\(Release:\).*/\1    '"0"'/' "$RPM/SPECS/openonload-dkms.spec"
fi

try rpmbuild -bb --define "_topdir $RPM" "$RPM/SPECS/openonload-dkms.spec"
